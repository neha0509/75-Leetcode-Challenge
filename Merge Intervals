public class Solution {
    public int[][] Merge(int[][] intervals) {
            List<int[]> data = new List<int[]>();
            //Array.Sort(intervals, (a, b) => { return a[0] - b[0]; });
            intervals =  intervals.OrderBy(x=>x[0]).ToArray();
        
            int startTime = intervals[0][0];
        
            int endTime = intervals[0][1];
        
            for (int i = 1; i < intervals.Length; i++)
            {
                int currentStartTime = intervals[i][0];
                int currentEndTime = intervals[i][1];

                if (endTime >= currentStartTime)
                {
                    endTime = Math.Max(endTime, currentEndTime);
                }
                else
                {
                    data.Add(new int[]
                    {
                        startTime,
                        endTime,
                    });
                    startTime = currentStartTime;
                    endTime = currentEndTime;
                }
            }
            data.Add(new int[]
                    {
                        startTime,
                        endTime,
                    });
            return data.ToArray();
    }
}

// Faster
public class Solution {
    public int[][] Merge(int[][] intervals) {        
        Array.Sort(intervals, (a, b) => 
               {
                   var first = a[0].CompareTo(b[0]);
                   return first != 0 ? first : a[1].CompareTo(b[1]);
               });
        
        var result = new List<int[]>();
        for(int i = 0; i < intervals.Length; i++)
        {
            if(result.Count == 0)
                result.Add(intervals[i]);
            
            var curr = result[result.Count - 1];
            if(curr[1] >= intervals[i][0])
            {
                curr[0] = Math.Min(curr[0], intervals[i][0]);
                curr[1] = Math.Max(curr[1], intervals[i][1]);
            }
            else
                result.Add(intervals[i]);
        }
        
        return result.ToArray();
    }
}



